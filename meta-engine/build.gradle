buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.5.6")
    }
}

plugins {
    id 'java'
    id "org.springframework.boot" version "2.5.6"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
}

group 'com.hoddmimes'
def versionFile = "src/main/java/com/hoddmimes/te/Version.java"


repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}



dependencies {


    implementation 'org.jetbrains:annotations:20.1.0'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.5.6'
    implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: '2.5.6'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: '2.5.6'

    implementation group: 'org.springframework.security', name: 'spring-security-core', version: '5.5.3'
    implementation group: 'org.springframework.security', name: 'spring-security-web', version: '5.5.3'
    implementation group: 'org.springframework.security', name: 'spring-security-config', version: '5.5.3'
    implementation group: 'org.springframework', name: 'spring-websocket', version: '5.3.12'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'org.mongodb', name: 'mongo-java-driver', version: '3.12.10'

    implementation group: 'org.bitcoinj', name: 'bitcoinj-core', version: '0.16.1'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'
    implementation group: 'org.web3j', name: 'crypto', version: '5.0.0'
    implementation group: 'org.web3j', name: 'core', version: '5.0.0'
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.9.3'

    implementation project(':meta-message')
    implementation project(':meta-common')

    testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')

}

task createTEVersion() {

    File dfh = new File( projectDir, versionFile )
    dfh.delete()

    def dateAndTime  = new Date().format('yyyy-MM-dd HH:mm:ss.SSS')
    File fh = new File( projectDir, versionFile )
    fh << "package com.hoddmimes.te;\n\n\n"
    fh << "/*\n"
    fh << "  ====================================================================================\n"
    fh << " * Note: This file is automatically generate" +
            " as part of the build process (i.e. build.gradle) \n"
    fh << " * Do not change or edit this file\n"
    fh << "  =====================================================================================\n"
    fh << "*/\n\n"
    fh << "public class Version\n"
    fh << "{\n"
    fh << "    private static final String cBuildDate = \"" + dateAndTime + "\";\n"
    fh << "    public static final String build = \" Version: " + project.version + " Built: \" + cBuildDate;\n"
    fh << "}\n"

    doLast {
        println "Create Version file"
    }
}



task buildFatJar (type: Jar ) {
    archiveBaseName= 'te'
    destinationDirectory = file("./build/libs/")

    from {
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    } with jar

    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"

    from('build/classes/java/main') {
        include '**/*.class'

    }
    from('../modum-engine/build/classes/java/main') {
        include '**/*.class'
    }
    duplicatesStrategy = 'exclude'

    manifest {
        attributes 'Implementation-Title': 'TE Fat Jar', 'Implementation-Version': project.version
    }
}


compileJava.dependsOn( createTEVersion )
build.finalizedBy(buildFatJar)

configurations {
    implementation.exclude module: 'spring-boot-starter-logging'
}

test {
    useJUnitPlatform()

    ignoreFailures = true

    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    jvmArgs "-Djava.net.preferIPv4Stack=true"
    workingDir = "../"

}
